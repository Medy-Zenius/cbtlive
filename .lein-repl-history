exit
(start-server)
(apply str (take 3 (shuffle (seq "abcdef"m))))
(apply str (take 3 (shuffle (seq "abcdef"))))
(start-server "3200")
(repeat 1 2)
(repeat 2 5)
(repeat 3 (shuffle [1 2 3]))
(defn anum [] (shuffle [1 2 3 4 5]))
(repeat 2 (anum))
(repeat 2 (rand-nth (anum)))
(str  (rand-nth (anum)) (rand-nth (anum))))
(str  (rand-nth (anum)) (rand-nth (anum)))
(rand-nth "ABC")
(defn admin-ubah-kode [nama]
  (let [anum (rand-nth ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"))
        sufik (str anum anum anum anum anum anum)]
    (str nama sufik)))
(admin-ubah-kode "saya")
(str \A \B)
(defn admin-ubah-kode [nama]
  (let [anum (rand-nth ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"))
        sufik (str anum anum anum anum anum anum)]
    (str sufik)))
(admin-ubah-kode "a")
(admin-ubah-kode 1)
(defn admin-ubah-kode [nama]
  (let [anum (rand-nth ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"))
        sufik (str anum anum anum anum anum anum)]
    sufik))
(admin-ubah-kode "a")
exit
(start-server)
exit
(use 'icbl.models.updatedb)
(insert-all-kodex)
(start-server)
exit
(start-server)
exit
(start-server)
exit
(start-server)
exit
(use 'icbl.models.updatedb)
(insert-all-kodex "proset")
(use 'icbl.models.updatedb :reload)
(insert-all-kodex "proset")
(insert-all-kodex "bankproset")
exit
(start-server)
exit
(use 'icbl.models.updatedb)
(insert-all-kodex "proset")
(insert-all-kodex "bankproset")
(use 'icbl.models.updatedb)
(insert-all-kodex "bankproset")
(insert-all-kodex "proset")
exit
(start-server)
exit
(start-server)
exit
(start-server)
exit
